---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-{{ .Values.environment }}
spec:
  acme:
    server: {{ .Values.acmeStagingEndpoint }}
    email: {{ .Values.email }}
    privateKeySecretRef:
      name: account-key-{{ .Values.environment }}
    solvers:
      - selector:
          dnsZones:
            - {{ .Values.domain }}
        dns01:
          route53:
            region: us-west-1
            {{ if .Values.devMode }}
            accessKeyID: AKIAQHVWSINA7X3GL5EW
            secretAccessKeySecretRef:
              name: env-vars
              key: aws-secret-access-key
            {{ end }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Values.environment }}-certificate
spec:
  secretName: {{ .Values.environment }}-certificate
  issuerRef:
    name: letsencrypt-{{ .Values.environment }}
    kind: ClusterIssuer
  dnsNames:
    - {{ .Values.domain }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-frontend-rule
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: letsencrypt-{{ .Values.environment }}
    external-dns.alpha.kubernetes.io/hostname: {{ .Values.domain }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    kubernetes.io/tls-acme: "true"
    # ingress.kubernetes.io/send-timeout: "600"
    # nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    # nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    # nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    # nginx.ingress.kubernetes.io/configuration-snippet: "proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;"
    # nginx.ingress.kubernetes.io/server-snippet: "ssl_verify_client optional_no_ca;"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    #nginx.ingress.kubernetes.io/configuration-snippet: |
    #  if ($http_x_forwarded_proto = 'http') {
    #    return 301 https://$host$request_uri;
    #  }
    # nginx.ingress.kubernetes.io/service-upstream: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
    # nginx.ingress.kubernetes.io/proxy-ssl-name: {{ .Values.domain }}
    # nginx.ingress.kubernetes.io/server-snippet: |
    #   proxy_ssl_name {{ .Values.domain }};
    #  proxy_ssl_server_name on;
spec:
  tls:
    - hosts:
        - {{ .Values.domain }}
      secretName: {{ .Values.environment }}-certificate
  rules:
  - host: {{ .Values.domain }}
    http:
      paths:
        - path: /(.*)
          pathType: Prefix
          backend:
            service:
              name: web-frontend
              port:
                number: 443
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: public-api-rule
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/cors-allow-origin: {{ .Values.allowedOrigin }}
    cert-manager.io/cluster-issuer: letsencrypt-{{ .Values.environment }}
    nginx.ingress.kubernetes.io/rewrite-target: /v$1/$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    external-dns.alpha.kubernetes.io/hostname: {{ .Values.domain }}
spec:
  tls:
    - hosts:
        - {{ .Values.domain }}
      secretName: {{ .Values.environment }}-certificate
  rules:
    - host: {{ .Values.domain }}
      http:
        paths:
          - path: /v([0-9])/(.*)
            pathType: Prefix
            backend:
              service:
                name: public-api
                port:
                  number: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      {{ if .Values.dnsServiceAccount }}
      serviceAccountName: {{ .Values.dnsServiceAccount }}
      {{ end }}
      containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.7.6
          imagePullPolicy: Always
          env:
            {{ if .Values.devMode }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: aws-secret-access-key
            {{ end }}
          args:
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --domain-filter={{ .Values.domainFilter }}
            - --provider=aws
            - --aws-zone-type=public
            - --registry=txt
            - --txt-owner-id={{ .Values.domain }}
            - --txt-prefix=txt. #https://github.com/kubernetes-sigs/external-dns/blob/master/docs/faq.md#im-using-an-elb-with-txt-registry-but-the-cname-record-clashes-with-the-txt-record-how-to-avoid-this
            - --interval=15s
            # - --log-level=debug